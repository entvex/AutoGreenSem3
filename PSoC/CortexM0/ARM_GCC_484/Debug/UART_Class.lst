ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"UART_Class.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.initUART,"ax",%progbits
  18              		.align	2
  19              		.global	initUART
  20              		.code	16
  21              		.thumb_func
  22              		.type	initUART, %function
  23              	initUART:
  24              	.LFB33:
  25              		.file 1 ".\\UART_Class.c"
   1:.\UART_Class.c **** /* ========================================
   2:.\UART_Class.c ****  * 
   3:.\UART_Class.c ****  * AutoGreen - PSoC_Master
   4:.\UART_Class.c ****  * UART_Class.c
   5:.\UART_Class.c ****  * (Description)
   6:.\UART_Class.c ****  * PRJ3 - GRP9
   7:.\UART_Class.c ****  * 2015-04-15
   8:.\UART_Class.c ****  *
   9:.\UART_Class.c ****  * ========================================
  10:.\UART_Class.c **** */
  11:.\UART_Class.c **** 
  12:.\UART_Class.c **** // Include files
  13:.\UART_Class.c **** #include "UART_Class.h"
  14:.\UART_Class.c **** 
  15:.\UART_Class.c **** //Definitions
  16:.\UART_Class.c **** #define CONVERT_TO_ASCII 48
  17:.\UART_Class.c **** 
  18:.\UART_Class.c **** // Init
  19:.\UART_Class.c **** void initUART(void){
  26              		.loc 1 19 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 00AF     		add	r7, sp, #0
  33              		.cfi_def_cfa_register 7
  20:.\UART_Class.c ****     UART_Start();                   // Starts UART component
  34              		.loc 1 20 0
  35 0004 FFF7FEFF 		bl	UART_Start
  21:.\UART_Class.c **** }
  36              		.loc 1 21 0
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 2


  37 0008 BD46     		mov	sp, r7
  38              		@ sp needed
  39 000a 80BD     		pop	{r7, pc}
  40              		.cfi_endproc
  41              	.LFE33:
  42              		.size	initUART, .-initUART
  43              		.section	.text.respondTemp,"ax",%progbits
  44              		.align	2
  45              		.global	respondTemp
  46              		.code	16
  47              		.thumb_func
  48              		.type	respondTemp, %function
  49              	respondTemp:
  50              	.LFB34:
  22:.\UART_Class.c **** 
  23:.\UART_Class.c **** //----------respondTemp0----------
  24:.\UART_Class.c **** int8 respondTemp(uint8 temp){
  51              		.loc 1 24 0
  52              		.cfi_startproc
  53 0000 80B5     		push	{r7, lr}
  54              		.cfi_def_cfa_offset 8
  55              		.cfi_offset 7, -8
  56              		.cfi_offset 14, -4
  57 0002 82B0     		sub	sp, sp, #8
  58              		.cfi_def_cfa_offset 16
  59 0004 00AF     		add	r7, sp, #0
  60              		.cfi_def_cfa_register 7
  61 0006 021C     		mov	r2, r0
  62 0008 FB1D     		add	r3, r7, #7
  63 000a 1A70     		strb	r2, [r3]
  25:.\UART_Class.c ****     if(temp){
  64              		.loc 1 25 0
  65 000c FB1D     		add	r3, r7, #7
  66 000e 1B78     		ldrb	r3, [r3]
  67 0010 002B     		cmp	r3, #0
  68 0012 09D0     		beq	.L3
  26:.\UART_Class.c ****         // If temp is between 1 and 200(both inclusive) "T" and temp is sent to DevKit8000
  27:.\UART_Class.c ****         UART_UartPutChar('T');
  69              		.loc 1 27 0
  70 0014 5420     		mov	r0, #84
  71 0016 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  28:.\UART_Class.c ****         UART_UartPutChar(temp);
  72              		.loc 1 28 0
  73 001a FB1D     		add	r3, r7, #7
  74 001c 1B78     		ldrb	r3, [r3]
  75 001e 181C     		mov	r0, r3
  76 0020 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  29:.\UART_Class.c ****         return 0;
  77              		.loc 1 29 0
  78 0024 0023     		mov	r3, #0
  79 0026 06E0     		b	.L4
  80              	.L3:
  30:.\UART_Class.c ****     }
  31:.\UART_Class.c ****     else{
  32:.\UART_Class.c ****         // If temp isn't between 1 and 200(both inclusive) "XT" is sent to DevKit8000
  33:.\UART_Class.c ****         UART_UartPutChar('X');
  81              		.loc 1 33 0
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 3


  82 0028 5820     		mov	r0, #88
  83 002a FFF7FEFF 		bl	UART_SpiUartWriteTxData
  34:.\UART_Class.c ****         UART_UartPutChar('T');
  84              		.loc 1 34 0
  85 002e 5420     		mov	r0, #84
  86 0030 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  35:.\UART_Class.c ****         return -1;
  87              		.loc 1 35 0
  88 0034 FF23     		mov	r3, #255
  89              	.L4:
  90 0036 5BB2     		sxtb	r3, r3
  36:.\UART_Class.c ****     }
  37:.\UART_Class.c **** }
  91              		.loc 1 37 0
  92 0038 181C     		mov	r0, r3
  93 003a BD46     		mov	sp, r7
  94 003c 02B0     		add	sp, sp, #8
  95              		@ sp needed
  96 003e 80BD     		pop	{r7, pc}
  97              		.cfi_endproc
  98              	.LFE34:
  99              		.size	respondTemp, .-respondTemp
 100              		.section	.text.respondSoilHum,"ax",%progbits
 101              		.align	2
 102              		.global	respondSoilHum
 103              		.code	16
 104              		.thumb_func
 105              		.type	respondSoilHum, %function
 106              	respondSoilHum:
 107              	.LFB35:
  38:.\UART_Class.c **** //----------respondTemp1----------
  39:.\UART_Class.c **** 
  40:.\UART_Class.c **** int8 respondSoilHum(uint8 index, uint8 soilHum){
 108              		.loc 1 40 0
 109              		.cfi_startproc
 110 0000 80B5     		push	{r7, lr}
 111              		.cfi_def_cfa_offset 8
 112              		.cfi_offset 7, -8
 113              		.cfi_offset 14, -4
 114 0002 82B0     		sub	sp, sp, #8
 115              		.cfi_def_cfa_offset 16
 116 0004 00AF     		add	r7, sp, #0
 117              		.cfi_def_cfa_register 7
 118 0006 0A1C     		mov	r2, r1
 119 0008 FB1D     		add	r3, r7, #7
 120 000a 011C     		add	r1, r0, #0
 121 000c 1970     		strb	r1, [r3]
 122 000e BB1D     		add	r3, r7, #6
 123 0010 1A70     		strb	r2, [r3]
  41:.\UART_Class.c ****     if(soilHum <= 10 && soilHum >= 1){
 124              		.loc 1 41 0
 125 0012 BB1D     		add	r3, r7, #6
 126 0014 1B78     		ldrb	r3, [r3]
 127 0016 0A2B     		cmp	r3, #10
 128 0018 13D8     		bhi	.L6
 129              		.loc 1 41 0 is_stmt 0 discriminator 1
 130 001a BB1D     		add	r3, r7, #6
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 4


 131 001c 1B78     		ldrb	r3, [r3]
 132 001e 002B     		cmp	r3, #0
 133 0020 0FD0     		beq	.L6
  42:.\UART_Class.c ****         // If soilHum is between 1 and 10(both inclusive) "S", the index number and soilHum is sent
  43:.\UART_Class.c ****         UART_UartPutChar('S');
 134              		.loc 1 43 0 is_stmt 1
 135 0022 5320     		mov	r0, #83
 136 0024 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  44:.\UART_Class.c ****         UART_UartPutChar(index + CONVERT_TO_ASCII + 1); //Conevert to ASCII and convert to 1-6.
 137              		.loc 1 44 0
 138 0028 FB1D     		add	r3, r7, #7
 139 002a 1B78     		ldrb	r3, [r3]
 140 002c 3133     		add	r3, r3, #49
 141 002e 181C     		mov	r0, r3
 142 0030 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  45:.\UART_Class.c ****         UART_UartPutChar(soilHum);
 143              		.loc 1 45 0
 144 0034 BB1D     		add	r3, r7, #6
 145 0036 1B78     		ldrb	r3, [r3]
 146 0038 181C     		mov	r0, r3
 147 003a FFF7FEFF 		bl	UART_SpiUartWriteTxData
  46:.\UART_Class.c ****         return 0;
 148              		.loc 1 46 0
 149 003e 0023     		mov	r3, #0
 150 0040 06E0     		b	.L7
 151              	.L6:
  47:.\UART_Class.c ****     }
  48:.\UART_Class.c ****     else{
  49:.\UART_Class.c ****         // If soilHum isn't between 1 and 10(both inclusive) "XS" is sent to DevKit8000
  50:.\UART_Class.c ****         UART_UartPutChar('X');
 152              		.loc 1 50 0
 153 0042 5820     		mov	r0, #88
 154 0044 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  51:.\UART_Class.c ****         UART_UartPutChar('S');
 155              		.loc 1 51 0
 156 0048 5320     		mov	r0, #83
 157 004a FFF7FEFF 		bl	UART_SpiUartWriteTxData
  52:.\UART_Class.c ****         return -1;
 158              		.loc 1 52 0
 159 004e FF23     		mov	r3, #255
 160              	.L7:
 161 0050 5BB2     		sxtb	r3, r3
  53:.\UART_Class.c ****     }
  54:.\UART_Class.c **** }
 162              		.loc 1 54 0
 163 0052 181C     		mov	r0, r3
 164 0054 BD46     		mov	sp, r7
 165 0056 02B0     		add	sp, sp, #8
 166              		@ sp needed
 167 0058 80BD     		pop	{r7, pc}
 168              		.cfi_endproc
 169              	.LFE35:
 170              		.size	respondSoilHum, .-respondSoilHum
 171 005a C046     		.section	.text.respondHeat,"ax",%progbits
 172              		.align	2
 173              		.global	respondHeat
 174              		.code	16
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 5


 175              		.thumb_func
 176              		.type	respondHeat, %function
 177              	respondHeat:
 178              	.LFB36:
  55:.\UART_Class.c **** 
  56:.\UART_Class.c **** int8 respondHeat(int8 heatStatus, uint8 onOff){
 179              		.loc 1 56 0
 180              		.cfi_startproc
 181 0000 80B5     		push	{r7, lr}
 182              		.cfi_def_cfa_offset 8
 183              		.cfi_offset 7, -8
 184              		.cfi_offset 14, -4
 185 0002 82B0     		sub	sp, sp, #8
 186              		.cfi_def_cfa_offset 16
 187 0004 00AF     		add	r7, sp, #0
 188              		.cfi_def_cfa_register 7
 189 0006 0A1C     		mov	r2, r1
 190 0008 FB1D     		add	r3, r7, #7
 191 000a 011C     		add	r1, r0, #0
 192 000c 1970     		strb	r1, [r3]
 193 000e BB1D     		add	r3, r7, #6
 194 0010 1A70     		strb	r2, [r3]
  57:.\UART_Class.c ****     if(heatStatus == 0){
 195              		.loc 1 57 0
 196 0012 FB1D     		add	r3, r7, #7
 197 0014 1B78     		ldrb	r3, [r3]
 198 0016 5BB2     		sxtb	r3, r3
 199 0018 002B     		cmp	r3, #0
 200 001a 06D1     		bne	.L9
  58:.\UART_Class.c ****         // If heatStatus is 0 then onOff('H' or 'K') is sent to DevKit8000
  59:.\UART_Class.c ****         UART_UartPutChar(onOff);
 201              		.loc 1 59 0
 202 001c BB1D     		add	r3, r7, #6
 203 001e 1B78     		ldrb	r3, [r3]
 204 0020 181C     		mov	r0, r3
 205 0022 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  60:.\UART_Class.c ****         return 0;
 206              		.loc 1 60 0
 207 0026 0023     		mov	r3, #0
 208 0028 08E0     		b	.L10
 209              	.L9:
  61:.\UART_Class.c ****     }
  62:.\UART_Class.c ****     else{
  63:.\UART_Class.c ****         // If heatStatus isn't 0 then 'X' and onOff('H' or 'K') is sent to DevKit8000
  64:.\UART_Class.c ****         UART_UartPutChar('X');
 210              		.loc 1 64 0
 211 002a 5820     		mov	r0, #88
 212 002c FFF7FEFF 		bl	UART_SpiUartWriteTxData
  65:.\UART_Class.c ****         UART_UartPutChar(onOff);
 213              		.loc 1 65 0
 214 0030 BB1D     		add	r3, r7, #6
 215 0032 1B78     		ldrb	r3, [r3]
 216 0034 181C     		mov	r0, r3
 217 0036 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  66:.\UART_Class.c ****         return -1;
 218              		.loc 1 66 0
 219 003a FF23     		mov	r3, #255
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 6


 220              	.L10:
 221 003c 5BB2     		sxtb	r3, r3
  67:.\UART_Class.c ****     }
  68:.\UART_Class.c **** }
 222              		.loc 1 68 0
 223 003e 181C     		mov	r0, r3
 224 0040 BD46     		mov	sp, r7
 225 0042 02B0     		add	sp, sp, #8
 226              		@ sp needed
 227 0044 80BD     		pop	{r7, pc}
 228              		.cfi_endproc
 229              	.LFE36:
 230              		.size	respondHeat, .-respondHeat
 231 0046 C046     		.section	.text.respondWin,"ax",%progbits
 232              		.align	2
 233              		.global	respondWin
 234              		.code	16
 235              		.thumb_func
 236              		.type	respondWin, %function
 237              	respondWin:
 238              	.LFB37:
  69:.\UART_Class.c **** 
  70:.\UART_Class.c **** int8 respondWin(int8 winStatus){
 239              		.loc 1 70 0
 240              		.cfi_startproc
 241 0000 80B5     		push	{r7, lr}
 242              		.cfi_def_cfa_offset 8
 243              		.cfi_offset 7, -8
 244              		.cfi_offset 14, -4
 245 0002 82B0     		sub	sp, sp, #8
 246              		.cfi_def_cfa_offset 16
 247 0004 00AF     		add	r7, sp, #0
 248              		.cfi_def_cfa_register 7
 249 0006 021C     		mov	r2, r0
 250 0008 FB1D     		add	r3, r7, #7
 251 000a 1A70     		strb	r2, [r3]
  71:.\UART_Class.c ****     if(winStatus == 0){
 252              		.loc 1 71 0
 253 000c FB1D     		add	r3, r7, #7
 254 000e 1B78     		ldrb	r3, [r3]
 255 0010 5BB2     		sxtb	r3, r3
 256 0012 002B     		cmp	r3, #0
 257 0014 04D1     		bne	.L12
  72:.\UART_Class.c ****         // If winStatus is 0 then 'W' is sent to DevKit8000
  73:.\UART_Class.c ****         UART_UartPutChar('W');
 258              		.loc 1 73 0
 259 0016 5720     		mov	r0, #87
 260 0018 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  74:.\UART_Class.c ****         return 0;
 261              		.loc 1 74 0
 262 001c 0023     		mov	r3, #0
 263 001e 06E0     		b	.L13
 264              	.L12:
  75:.\UART_Class.c ****     }
  76:.\UART_Class.c ****     else{
  77:.\UART_Class.c ****         // If heatStatus isn't 0 then "XW" is sent to DevKit8000
  78:.\UART_Class.c ****         UART_UartPutChar('X');
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 7


 265              		.loc 1 78 0
 266 0020 5820     		mov	r0, #88
 267 0022 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  79:.\UART_Class.c ****         UART_UartPutChar('W');
 268              		.loc 1 79 0
 269 0026 5720     		mov	r0, #87
 270 0028 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  80:.\UART_Class.c ****         return -1;
 271              		.loc 1 80 0
 272 002c FF23     		mov	r3, #255
 273              	.L13:
 274 002e 5BB2     		sxtb	r3, r3
  81:.\UART_Class.c ****     }
  82:.\UART_Class.c **** }
 275              		.loc 1 82 0
 276 0030 181C     		mov	r0, r3
 277 0032 BD46     		mov	sp, r7
 278 0034 02B0     		add	sp, sp, #8
 279              		@ sp needed
 280 0036 80BD     		pop	{r7, pc}
 281              		.cfi_endproc
 282              	.LFE37:
 283              		.size	respondWin, .-respondWin
 284              		.section	.text.respondVent,"ax",%progbits
 285              		.align	2
 286              		.global	respondVent
 287              		.code	16
 288              		.thumb_func
 289              		.type	respondVent, %function
 290              	respondVent:
 291              	.LFB38:
  83:.\UART_Class.c **** 
  84:.\UART_Class.c **** int8 respondVent(int8 ventStatus){
 292              		.loc 1 84 0
 293              		.cfi_startproc
 294 0000 80B5     		push	{r7, lr}
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 7, -8
 297              		.cfi_offset 14, -4
 298 0002 82B0     		sub	sp, sp, #8
 299              		.cfi_def_cfa_offset 16
 300 0004 00AF     		add	r7, sp, #0
 301              		.cfi_def_cfa_register 7
 302 0006 021C     		mov	r2, r0
 303 0008 FB1D     		add	r3, r7, #7
 304 000a 1A70     		strb	r2, [r3]
  85:.\UART_Class.c ****     if(ventStatus == 0){
 305              		.loc 1 85 0
 306 000c FB1D     		add	r3, r7, #7
 307 000e 1B78     		ldrb	r3, [r3]
 308 0010 5BB2     		sxtb	r3, r3
 309 0012 002B     		cmp	r3, #0
 310 0014 04D1     		bne	.L15
  86:.\UART_Class.c ****         // If ventStatus is 0 then 'V' is sent to DevKit8000
  87:.\UART_Class.c ****         UART_UartPutChar('V');
 311              		.loc 1 87 0
 312 0016 5620     		mov	r0, #86
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 8


 313 0018 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  88:.\UART_Class.c ****         return 0;
 314              		.loc 1 88 0
 315 001c 0023     		mov	r3, #0
 316 001e 06E0     		b	.L16
 317              	.L15:
  89:.\UART_Class.c ****     }
  90:.\UART_Class.c ****     else{
  91:.\UART_Class.c ****         // If ventStatus isn't 0 then "XV" is sent to DevKit8000
  92:.\UART_Class.c ****         UART_UartPutChar('X');
 318              		.loc 1 92 0
 319 0020 5820     		mov	r0, #88
 320 0022 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  93:.\UART_Class.c ****         UART_UartPutChar('V');
 321              		.loc 1 93 0
 322 0026 5620     		mov	r0, #86
 323 0028 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  94:.\UART_Class.c ****         return -1;
 324              		.loc 1 94 0
 325 002c FF23     		mov	r3, #255
 326              	.L16:
 327 002e 5BB2     		sxtb	r3, r3
  95:.\UART_Class.c ****     }
  96:.\UART_Class.c **** }
 328              		.loc 1 96 0
 329 0030 181C     		mov	r0, r3
 330 0032 BD46     		mov	sp, r7
 331 0034 02B0     		add	sp, sp, #8
 332              		@ sp needed
 333 0036 80BD     		pop	{r7, pc}
 334              		.cfi_endproc
 335              	.LFE38:
 336              		.size	respondVent, .-respondVent
 337              		.section	.text.respondIrri,"ax",%progbits
 338              		.align	2
 339              		.global	respondIrri
 340              		.code	16
 341              		.thumb_func
 342              		.type	respondIrri, %function
 343              	respondIrri:
 344              	.LFB39:
  97:.\UART_Class.c **** 
  98:.\UART_Class.c **** int8 respondIrri(int8 irriStatus){
 345              		.loc 1 98 0
 346              		.cfi_startproc
 347 0000 80B5     		push	{r7, lr}
 348              		.cfi_def_cfa_offset 8
 349              		.cfi_offset 7, -8
 350              		.cfi_offset 14, -4
 351 0002 82B0     		sub	sp, sp, #8
 352              		.cfi_def_cfa_offset 16
 353 0004 00AF     		add	r7, sp, #0
 354              		.cfi_def_cfa_register 7
 355 0006 021C     		mov	r2, r0
 356 0008 FB1D     		add	r3, r7, #7
 357 000a 1A70     		strb	r2, [r3]
  99:.\UART_Class.c ****     if(irriStatus == 0){
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 9


 358              		.loc 1 99 0
 359 000c FB1D     		add	r3, r7, #7
 360 000e 1B78     		ldrb	r3, [r3]
 361 0010 5BB2     		sxtb	r3, r3
 362 0012 002B     		cmp	r3, #0
 363 0014 04D1     		bne	.L18
 100:.\UART_Class.c ****         // If irriStatus is 0 then 'F' is sent to DevKit8000
 101:.\UART_Class.c ****         UART_UartPutChar('F');
 364              		.loc 1 101 0
 365 0016 4620     		mov	r0, #70
 366 0018 FFF7FEFF 		bl	UART_SpiUartWriteTxData
 102:.\UART_Class.c ****         return 0;
 367              		.loc 1 102 0
 368 001c 0023     		mov	r3, #0
 369 001e 06E0     		b	.L19
 370              	.L18:
 103:.\UART_Class.c ****     }
 104:.\UART_Class.c ****     else{
 105:.\UART_Class.c ****         // If irriStatus isn't 0 then "XF" is sent to DevKit8000
 106:.\UART_Class.c ****         UART_UartPutChar('X');
 371              		.loc 1 106 0
 372 0020 5820     		mov	r0, #88
 373 0022 FFF7FEFF 		bl	UART_SpiUartWriteTxData
 107:.\UART_Class.c ****         UART_UartPutChar('F');
 374              		.loc 1 107 0
 375 0026 4620     		mov	r0, #70
 376 0028 FFF7FEFF 		bl	UART_SpiUartWriteTxData
 108:.\UART_Class.c ****         return -1;
 377              		.loc 1 108 0
 378 002c FF23     		mov	r3, #255
 379              	.L19:
 380 002e 5BB2     		sxtb	r3, r3
 109:.\UART_Class.c ****     }
 110:.\UART_Class.c **** }
 381              		.loc 1 110 0
 382 0030 181C     		mov	r0, r3
 383 0032 BD46     		mov	sp, r7
 384 0034 02B0     		add	sp, sp, #8
 385              		@ sp needed
 386 0036 80BD     		pop	{r7, pc}
 387              		.cfi_endproc
 388              	.LFE39:
 389              		.size	respondIrri, .-respondIrri
 390              		.section	.text.dkRequest,"ax",%progbits
 391              		.align	2
 392              		.global	dkRequest
 393              		.code	16
 394              		.thumb_func
 395              		.type	dkRequest, %function
 396              	dkRequest:
 397              	.LFB40:
 111:.\UART_Class.c **** 
 112:.\UART_Class.c **** //----------dkRequest0----------
 113:.\UART_Class.c **** uint8 dkRequest(void){
 398              		.loc 1 113 0
 399              		.cfi_startproc
 400 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 10


 401              		.cfi_def_cfa_offset 8
 402              		.cfi_offset 7, -8
 403              		.cfi_offset 14, -4
 404 0002 00AF     		add	r7, sp, #0
 405              		.cfi_def_cfa_register 7
 114:.\UART_Class.c ****     // Reads the UART buffer
 115:.\UART_Class.c ****     return UART_UartGetChar();
 406              		.loc 1 115 0
 407 0004 FFF7FEFF 		bl	UART_UartGetChar
 408 0008 031C     		mov	r3, r0
 409 000a DBB2     		uxtb	r3, r3
 116:.\UART_Class.c **** }
 410              		.loc 1 116 0
 411 000c 181C     		mov	r0, r3
 412 000e BD46     		mov	sp, r7
 413              		@ sp needed
 414 0010 80BD     		pop	{r7, pc}
 415              		.cfi_endproc
 416              	.LFE40:
 417              		.size	dkRequest, .-dkRequest
 418 0012 C046     		.text
 419              	.Letext0:
 420              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 421              		.section	.debug_info,"",%progbits
 422              	.Ldebug_info0:
 423 0000 D7010000 		.4byte	0x1d7
 424 0004 0400     		.2byte	0x4
 425 0006 00000000 		.4byte	.Ldebug_abbrev0
 426 000a 04       		.byte	0x4
 427 000b 01       		.uleb128 0x1
 428 000c 39000000 		.4byte	.LASF30
 429 0010 01       		.byte	0x1
 430 0011 E6010000 		.4byte	.LASF31
 431 0015 87010000 		.4byte	.LASF32
 432 0019 00000000 		.4byte	.Ldebug_ranges0+0
 433 001d 00000000 		.4byte	0
 434 0021 00000000 		.4byte	.Ldebug_line0
 435 0025 02       		.uleb128 0x2
 436 0026 01       		.byte	0x1
 437 0027 06       		.byte	0x6
 438 0028 09020000 		.4byte	.LASF0
 439 002c 02       		.uleb128 0x2
 440 002d 01       		.byte	0x1
 441 002e 08       		.byte	0x8
 442 002f B5000000 		.4byte	.LASF1
 443 0033 02       		.uleb128 0x2
 444 0034 02       		.byte	0x2
 445 0035 05       		.byte	0x5
 446 0036 D6010000 		.4byte	.LASF2
 447 003a 02       		.uleb128 0x2
 448 003b 02       		.byte	0x2
 449 003c 07       		.byte	0x7
 450 003d 14000000 		.4byte	.LASF3
 451 0041 02       		.uleb128 0x2
 452 0042 04       		.byte	0x4
 453 0043 05       		.byte	0x5
 454 0044 0B000000 		.4byte	.LASF4
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 11


 455 0048 02       		.uleb128 0x2
 456 0049 04       		.byte	0x4
 457 004a 07       		.byte	0x7
 458 004b D2000000 		.4byte	.LASF5
 459 004f 02       		.uleb128 0x2
 460 0050 08       		.byte	0x8
 461 0051 05       		.byte	0x5
 462 0052 79010000 		.4byte	.LASF6
 463 0056 02       		.uleb128 0x2
 464 0057 08       		.byte	0x8
 465 0058 07       		.byte	0x7
 466 0059 38010000 		.4byte	.LASF7
 467 005d 03       		.uleb128 0x3
 468 005e 04       		.byte	0x4
 469 005f 05       		.byte	0x5
 470 0060 696E7400 		.ascii	"int\000"
 471 0064 02       		.uleb128 0x2
 472 0065 04       		.byte	0x4
 473 0066 07       		.byte	0x7
 474 0067 1F010000 		.4byte	.LASF8
 475 006b 04       		.uleb128 0x4
 476 006c E9000000 		.4byte	.LASF9
 477 0070 02       		.byte	0x2
 478 0071 A1       		.byte	0xa1
 479 0072 2C000000 		.4byte	0x2c
 480 0076 04       		.uleb128 0x4
 481 0077 18010000 		.4byte	.LASF10
 482 007b 02       		.byte	0x2
 483 007c A3       		.byte	0xa3
 484 007d 48000000 		.4byte	0x48
 485 0081 04       		.uleb128 0x4
 486 0082 13010000 		.4byte	.LASF11
 487 0086 02       		.byte	0x2
 488 0087 A4       		.byte	0xa4
 489 0088 25000000 		.4byte	0x25
 490 008c 02       		.uleb128 0x2
 491 008d 04       		.byte	0x4
 492 008e 04       		.byte	0x4
 493 008f 33000000 		.4byte	.LASF12
 494 0093 02       		.uleb128 0x2
 495 0094 08       		.byte	0x8
 496 0095 04       		.byte	0x4
 497 0096 FA000000 		.4byte	.LASF13
 498 009a 02       		.uleb128 0x2
 499 009b 01       		.byte	0x1
 500 009c 08       		.byte	0x8
 501 009d F5010000 		.4byte	.LASF14
 502 00a1 02       		.uleb128 0x2
 503 00a2 04       		.byte	0x4
 504 00a3 07       		.byte	0x7
 505 00a4 70010000 		.4byte	.LASF15
 506 00a8 05       		.uleb128 0x5
 507 00a9 C9000000 		.4byte	.LASF33
 508 00ad 01       		.byte	0x1
 509 00ae 13       		.byte	0x13
 510 00af 00000000 		.4byte	.LFB33
 511 00b3 0C000000 		.4byte	.LFE33-.LFB33
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 12


 512 00b7 01       		.uleb128 0x1
 513 00b8 9C       		.byte	0x9c
 514 00b9 06       		.uleb128 0x6
 515 00ba 4F010000 		.4byte	.LASF16
 516 00be 01       		.byte	0x1
 517 00bf 18       		.byte	0x18
 518 00c0 81000000 		.4byte	0x81
 519 00c4 00000000 		.4byte	.LFB34
 520 00c8 40000000 		.4byte	.LFE34-.LFB34
 521 00cc 01       		.uleb128 0x1
 522 00cd 9C       		.byte	0x9c
 523 00ce E1000000 		.4byte	0xe1
 524 00d2 07       		.uleb128 0x7
 525 00d3 E4000000 		.4byte	.LASF18
 526 00d7 01       		.byte	0x1
 527 00d8 18       		.byte	0x18
 528 00d9 6B000000 		.4byte	0x6b
 529 00dd 02       		.uleb128 0x2
 530 00de 91       		.byte	0x91
 531 00df 77       		.sleb128 -9
 532 00e0 00       		.byte	0
 533 00e1 06       		.uleb128 0x6
 534 00e2 FA010000 		.4byte	.LASF17
 535 00e6 01       		.byte	0x1
 536 00e7 28       		.byte	0x28
 537 00e8 81000000 		.4byte	0x81
 538 00ec 00000000 		.4byte	.LFB35
 539 00f0 5A000000 		.4byte	.LFE35-.LFB35
 540 00f4 01       		.uleb128 0x1
 541 00f5 9C       		.byte	0x9c
 542 00f6 17010000 		.4byte	0x117
 543 00fa 07       		.uleb128 0x7
 544 00fb E0010000 		.4byte	.LASF19
 545 00ff 01       		.byte	0x1
 546 0100 28       		.byte	0x28
 547 0101 6B000000 		.4byte	0x6b
 548 0105 02       		.uleb128 0x2
 549 0106 91       		.byte	0x91
 550 0107 77       		.sleb128 -9
 551 0108 07       		.uleb128 0x7
 552 0109 01010000 		.4byte	.LASF20
 553 010d 01       		.byte	0x1
 554 010e 28       		.byte	0x28
 555 010f 6B000000 		.4byte	0x6b
 556 0113 02       		.uleb128 0x2
 557 0114 91       		.byte	0x91
 558 0115 76       		.sleb128 -10
 559 0116 00       		.byte	0
 560 0117 06       		.uleb128 0x6
 561 0118 BF010000 		.4byte	.LASF21
 562 011c 01       		.byte	0x1
 563 011d 38       		.byte	0x38
 564 011e 81000000 		.4byte	0x81
 565 0122 00000000 		.4byte	.LFB36
 566 0126 46000000 		.4byte	.LFE36-.LFB36
 567 012a 01       		.uleb128 0x1
 568 012b 9C       		.byte	0x9c
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 13


 569 012c 4D010000 		.4byte	0x14d
 570 0130 07       		.uleb128 0x7
 571 0131 00000000 		.4byte	.LASF22
 572 0135 01       		.byte	0x1
 573 0136 38       		.byte	0x38
 574 0137 81000000 		.4byte	0x81
 575 013b 02       		.uleb128 0x2
 576 013c 91       		.byte	0x91
 577 013d 77       		.sleb128 -9
 578 013e 07       		.uleb128 0x7
 579 013f C3000000 		.4byte	.LASF23
 580 0143 01       		.byte	0x1
 581 0144 38       		.byte	0x38
 582 0145 6B000000 		.4byte	0x6b
 583 0149 02       		.uleb128 0x2
 584 014a 91       		.byte	0x91
 585 014b 76       		.sleb128 -10
 586 014c 00       		.byte	0
 587 014d 06       		.uleb128 0x6
 588 014e EF000000 		.4byte	.LASF24
 589 0152 01       		.byte	0x1
 590 0153 46       		.byte	0x46
 591 0154 81000000 		.4byte	0x81
 592 0158 00000000 		.4byte	.LFB37
 593 015c 38000000 		.4byte	.LFE37-.LFB37
 594 0160 01       		.uleb128 0x1
 595 0161 9C       		.byte	0x9c
 596 0162 75010000 		.4byte	0x175
 597 0166 07       		.uleb128 0x7
 598 0167 5B010000 		.4byte	.LASF25
 599 016b 01       		.byte	0x1
 600 016c 46       		.byte	0x46
 601 016d 81000000 		.4byte	0x81
 602 0171 02       		.uleb128 0x2
 603 0172 91       		.byte	0x91
 604 0173 77       		.sleb128 -9
 605 0174 00       		.byte	0
 606 0175 06       		.uleb128 0x6
 607 0176 2C010000 		.4byte	.LASF26
 608 017a 01       		.byte	0x1
 609 017b 54       		.byte	0x54
 610 017c 81000000 		.4byte	0x81
 611 0180 00000000 		.4byte	.LFB38
 612 0184 38000000 		.4byte	.LFE38-.LFB38
 613 0188 01       		.uleb128 0x1
 614 0189 9C       		.byte	0x9c
 615 018a 9D010000 		.4byte	0x19d
 616 018e 07       		.uleb128 0x7
 617 018f 65010000 		.4byte	.LASF27
 618 0193 01       		.byte	0x1
 619 0194 54       		.byte	0x54
 620 0195 81000000 		.4byte	0x81
 621 0199 02       		.uleb128 0x2
 622 019a 91       		.byte	0x91
 623 019b 77       		.sleb128 -9
 624 019c 00       		.byte	0
 625 019d 06       		.uleb128 0x6
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 14


 626 019e 27000000 		.4byte	.LASF28
 627 01a2 01       		.byte	0x1
 628 01a3 62       		.byte	0x62
 629 01a4 81000000 		.4byte	0x81
 630 01a8 00000000 		.4byte	.LFB39
 631 01ac 38000000 		.4byte	.LFE39-.LFB39
 632 01b0 01       		.uleb128 0x1
 633 01b1 9C       		.byte	0x9c
 634 01b2 C5010000 		.4byte	0x1c5
 635 01b6 07       		.uleb128 0x7
 636 01b7 CB010000 		.4byte	.LASF29
 637 01bb 01       		.byte	0x1
 638 01bc 62       		.byte	0x62
 639 01bd 81000000 		.4byte	0x81
 640 01c1 02       		.uleb128 0x2
 641 01c2 91       		.byte	0x91
 642 01c3 77       		.sleb128 -9
 643 01c4 00       		.byte	0
 644 01c5 08       		.uleb128 0x8
 645 01c6 09010000 		.4byte	.LASF34
 646 01ca 01       		.byte	0x1
 647 01cb 71       		.byte	0x71
 648 01cc 6B000000 		.4byte	0x6b
 649 01d0 00000000 		.4byte	.LFB40
 650 01d4 12000000 		.4byte	.LFE40-.LFB40
 651 01d8 01       		.uleb128 0x1
 652 01d9 9C       		.byte	0x9c
 653 01da 00       		.byte	0
 654              		.section	.debug_abbrev,"",%progbits
 655              	.Ldebug_abbrev0:
 656 0000 01       		.uleb128 0x1
 657 0001 11       		.uleb128 0x11
 658 0002 01       		.byte	0x1
 659 0003 25       		.uleb128 0x25
 660 0004 0E       		.uleb128 0xe
 661 0005 13       		.uleb128 0x13
 662 0006 0B       		.uleb128 0xb
 663 0007 03       		.uleb128 0x3
 664 0008 0E       		.uleb128 0xe
 665 0009 1B       		.uleb128 0x1b
 666 000a 0E       		.uleb128 0xe
 667 000b 55       		.uleb128 0x55
 668 000c 17       		.uleb128 0x17
 669 000d 11       		.uleb128 0x11
 670 000e 01       		.uleb128 0x1
 671 000f 10       		.uleb128 0x10
 672 0010 17       		.uleb128 0x17
 673 0011 00       		.byte	0
 674 0012 00       		.byte	0
 675 0013 02       		.uleb128 0x2
 676 0014 24       		.uleb128 0x24
 677 0015 00       		.byte	0
 678 0016 0B       		.uleb128 0xb
 679 0017 0B       		.uleb128 0xb
 680 0018 3E       		.uleb128 0x3e
 681 0019 0B       		.uleb128 0xb
 682 001a 03       		.uleb128 0x3
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 15


 683 001b 0E       		.uleb128 0xe
 684 001c 00       		.byte	0
 685 001d 00       		.byte	0
 686 001e 03       		.uleb128 0x3
 687 001f 24       		.uleb128 0x24
 688 0020 00       		.byte	0
 689 0021 0B       		.uleb128 0xb
 690 0022 0B       		.uleb128 0xb
 691 0023 3E       		.uleb128 0x3e
 692 0024 0B       		.uleb128 0xb
 693 0025 03       		.uleb128 0x3
 694 0026 08       		.uleb128 0x8
 695 0027 00       		.byte	0
 696 0028 00       		.byte	0
 697 0029 04       		.uleb128 0x4
 698 002a 16       		.uleb128 0x16
 699 002b 00       		.byte	0
 700 002c 03       		.uleb128 0x3
 701 002d 0E       		.uleb128 0xe
 702 002e 3A       		.uleb128 0x3a
 703 002f 0B       		.uleb128 0xb
 704 0030 3B       		.uleb128 0x3b
 705 0031 0B       		.uleb128 0xb
 706 0032 49       		.uleb128 0x49
 707 0033 13       		.uleb128 0x13
 708 0034 00       		.byte	0
 709 0035 00       		.byte	0
 710 0036 05       		.uleb128 0x5
 711 0037 2E       		.uleb128 0x2e
 712 0038 00       		.byte	0
 713 0039 3F       		.uleb128 0x3f
 714 003a 19       		.uleb128 0x19
 715 003b 03       		.uleb128 0x3
 716 003c 0E       		.uleb128 0xe
 717 003d 3A       		.uleb128 0x3a
 718 003e 0B       		.uleb128 0xb
 719 003f 3B       		.uleb128 0x3b
 720 0040 0B       		.uleb128 0xb
 721 0041 27       		.uleb128 0x27
 722 0042 19       		.uleb128 0x19
 723 0043 11       		.uleb128 0x11
 724 0044 01       		.uleb128 0x1
 725 0045 12       		.uleb128 0x12
 726 0046 06       		.uleb128 0x6
 727 0047 40       		.uleb128 0x40
 728 0048 18       		.uleb128 0x18
 729 0049 9642     		.uleb128 0x2116
 730 004b 19       		.uleb128 0x19
 731 004c 00       		.byte	0
 732 004d 00       		.byte	0
 733 004e 06       		.uleb128 0x6
 734 004f 2E       		.uleb128 0x2e
 735 0050 01       		.byte	0x1
 736 0051 3F       		.uleb128 0x3f
 737 0052 19       		.uleb128 0x19
 738 0053 03       		.uleb128 0x3
 739 0054 0E       		.uleb128 0xe
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 16


 740 0055 3A       		.uleb128 0x3a
 741 0056 0B       		.uleb128 0xb
 742 0057 3B       		.uleb128 0x3b
 743 0058 0B       		.uleb128 0xb
 744 0059 27       		.uleb128 0x27
 745 005a 19       		.uleb128 0x19
 746 005b 49       		.uleb128 0x49
 747 005c 13       		.uleb128 0x13
 748 005d 11       		.uleb128 0x11
 749 005e 01       		.uleb128 0x1
 750 005f 12       		.uleb128 0x12
 751 0060 06       		.uleb128 0x6
 752 0061 40       		.uleb128 0x40
 753 0062 18       		.uleb128 0x18
 754 0063 9642     		.uleb128 0x2116
 755 0065 19       		.uleb128 0x19
 756 0066 01       		.uleb128 0x1
 757 0067 13       		.uleb128 0x13
 758 0068 00       		.byte	0
 759 0069 00       		.byte	0
 760 006a 07       		.uleb128 0x7
 761 006b 05       		.uleb128 0x5
 762 006c 00       		.byte	0
 763 006d 03       		.uleb128 0x3
 764 006e 0E       		.uleb128 0xe
 765 006f 3A       		.uleb128 0x3a
 766 0070 0B       		.uleb128 0xb
 767 0071 3B       		.uleb128 0x3b
 768 0072 0B       		.uleb128 0xb
 769 0073 49       		.uleb128 0x49
 770 0074 13       		.uleb128 0x13
 771 0075 02       		.uleb128 0x2
 772 0076 18       		.uleb128 0x18
 773 0077 00       		.byte	0
 774 0078 00       		.byte	0
 775 0079 08       		.uleb128 0x8
 776 007a 2E       		.uleb128 0x2e
 777 007b 00       		.byte	0
 778 007c 3F       		.uleb128 0x3f
 779 007d 19       		.uleb128 0x19
 780 007e 03       		.uleb128 0x3
 781 007f 0E       		.uleb128 0xe
 782 0080 3A       		.uleb128 0x3a
 783 0081 0B       		.uleb128 0xb
 784 0082 3B       		.uleb128 0x3b
 785 0083 0B       		.uleb128 0xb
 786 0084 27       		.uleb128 0x27
 787 0085 19       		.uleb128 0x19
 788 0086 49       		.uleb128 0x49
 789 0087 13       		.uleb128 0x13
 790 0088 11       		.uleb128 0x11
 791 0089 01       		.uleb128 0x1
 792 008a 12       		.uleb128 0x12
 793 008b 06       		.uleb128 0x6
 794 008c 40       		.uleb128 0x40
 795 008d 18       		.uleb128 0x18
 796 008e 9642     		.uleb128 0x2116
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 17


 797 0090 19       		.uleb128 0x19
 798 0091 00       		.byte	0
 799 0092 00       		.byte	0
 800 0093 00       		.byte	0
 801              		.section	.debug_aranges,"",%progbits
 802 0000 54000000 		.4byte	0x54
 803 0004 0200     		.2byte	0x2
 804 0006 00000000 		.4byte	.Ldebug_info0
 805 000a 04       		.byte	0x4
 806 000b 00       		.byte	0
 807 000c 0000     		.2byte	0
 808 000e 0000     		.2byte	0
 809 0010 00000000 		.4byte	.LFB33
 810 0014 0C000000 		.4byte	.LFE33-.LFB33
 811 0018 00000000 		.4byte	.LFB34
 812 001c 40000000 		.4byte	.LFE34-.LFB34
 813 0020 00000000 		.4byte	.LFB35
 814 0024 5A000000 		.4byte	.LFE35-.LFB35
 815 0028 00000000 		.4byte	.LFB36
 816 002c 46000000 		.4byte	.LFE36-.LFB36
 817 0030 00000000 		.4byte	.LFB37
 818 0034 38000000 		.4byte	.LFE37-.LFB37
 819 0038 00000000 		.4byte	.LFB38
 820 003c 38000000 		.4byte	.LFE38-.LFB38
 821 0040 00000000 		.4byte	.LFB39
 822 0044 38000000 		.4byte	.LFE39-.LFB39
 823 0048 00000000 		.4byte	.LFB40
 824 004c 12000000 		.4byte	.LFE40-.LFB40
 825 0050 00000000 		.4byte	0
 826 0054 00000000 		.4byte	0
 827              		.section	.debug_ranges,"",%progbits
 828              	.Ldebug_ranges0:
 829 0000 00000000 		.4byte	.LFB33
 830 0004 0C000000 		.4byte	.LFE33
 831 0008 00000000 		.4byte	.LFB34
 832 000c 40000000 		.4byte	.LFE34
 833 0010 00000000 		.4byte	.LFB35
 834 0014 5A000000 		.4byte	.LFE35
 835 0018 00000000 		.4byte	.LFB36
 836 001c 46000000 		.4byte	.LFE36
 837 0020 00000000 		.4byte	.LFB37
 838 0024 38000000 		.4byte	.LFE37
 839 0028 00000000 		.4byte	.LFB38
 840 002c 38000000 		.4byte	.LFE38
 841 0030 00000000 		.4byte	.LFB39
 842 0034 38000000 		.4byte	.LFE39
 843 0038 00000000 		.4byte	.LFB40
 844 003c 12000000 		.4byte	.LFE40
 845 0040 00000000 		.4byte	0
 846 0044 00000000 		.4byte	0
 847              		.section	.debug_line,"",%progbits
 848              	.Ldebug_line0:
 849 0000 03010000 		.section	.debug_str,"MS",%progbits,1
 849      02004900 
 849      00000201 
 849      FB0E0D00 
 849      01010101 
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 18


 850              	.LASF22:
 851 0000 68656174 		.ascii	"heatStatus\000"
 851      53746174 
 851      757300
 852              	.LASF4:
 853 000b 6C6F6E67 		.ascii	"long int\000"
 853      20696E74 
 853      00
 854              	.LASF3:
 855 0014 73686F72 		.ascii	"short unsigned int\000"
 855      7420756E 
 855      7369676E 
 855      65642069 
 855      6E7400
 856              	.LASF28:
 857 0027 72657370 		.ascii	"respondIrri\000"
 857      6F6E6449 
 857      72726900 
 858              	.LASF12:
 859 0033 666C6F61 		.ascii	"float\000"
 859      7400
 860              	.LASF30:
 861 0039 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 861      4320342E 
 861      382E3420 
 861      32303134 
 861      30353236 
 862 006c 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 862      20726576 
 862      6973696F 
 862      6E203231 
 862      31333538 
 863 009f 30202D66 		.ascii	"0 -ffunction-sections\000"
 863      66756E63 
 863      74696F6E 
 863      2D736563 
 863      74696F6E 
 864              	.LASF1:
 865 00b5 756E7369 		.ascii	"unsigned char\000"
 865      676E6564 
 865      20636861 
 865      7200
 866              	.LASF23:
 867 00c3 6F6E4F66 		.ascii	"onOff\000"
 867      6600
 868              	.LASF33:
 869 00c9 696E6974 		.ascii	"initUART\000"
 869      55415254 
 869      00
 870              	.LASF5:
 871 00d2 6C6F6E67 		.ascii	"long unsigned int\000"
 871      20756E73 
 871      69676E65 
 871      6420696E 
 871      7400
 872              	.LASF18:
 873 00e4 74656D70 		.ascii	"temp\000"
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 19


 873      00
 874              	.LASF9:
 875 00e9 75696E74 		.ascii	"uint8\000"
 875      3800
 876              	.LASF24:
 877 00ef 72657370 		.ascii	"respondWin\000"
 877      6F6E6457 
 877      696E00
 878              	.LASF13:
 879 00fa 646F7562 		.ascii	"double\000"
 879      6C6500
 880              	.LASF20:
 881 0101 736F696C 		.ascii	"soilHum\000"
 881      48756D00 
 882              	.LASF34:
 883 0109 646B5265 		.ascii	"dkRequest\000"
 883      71756573 
 883      7400
 884              	.LASF11:
 885 0113 696E7438 		.ascii	"int8\000"
 885      00
 886              	.LASF10:
 887 0118 75696E74 		.ascii	"uint32\000"
 887      333200
 888              	.LASF8:
 889 011f 756E7369 		.ascii	"unsigned int\000"
 889      676E6564 
 889      20696E74 
 889      00
 890              	.LASF26:
 891 012c 72657370 		.ascii	"respondVent\000"
 891      6F6E6456 
 891      656E7400 
 892              	.LASF7:
 893 0138 6C6F6E67 		.ascii	"long long unsigned int\000"
 893      206C6F6E 
 893      6720756E 
 893      7369676E 
 893      65642069 
 894              	.LASF16:
 895 014f 72657370 		.ascii	"respondTemp\000"
 895      6F6E6454 
 895      656D7000 
 896              	.LASF25:
 897 015b 77696E53 		.ascii	"winStatus\000"
 897      74617475 
 897      7300
 898              	.LASF27:
 899 0165 76656E74 		.ascii	"ventStatus\000"
 899      53746174 
 899      757300
 900              	.LASF15:
 901 0170 73697A65 		.ascii	"sizetype\000"
 901      74797065 
 901      00
 902              	.LASF6:
 903 0179 6C6F6E67 		.ascii	"long long int\000"
ARM GAS  C:\Users\Bagger\AppData\Local\Temp\ccwPPbOQ.s 			page 20


 903      206C6F6E 
 903      6720696E 
 903      7400
 904              	.LASF32:
 905 0187 463A5C44 		.ascii	"F:\\Dropbox\\PRJ3\\LaTeX\\src\\PSoC_Master\\PSoC_Ma"
 905      726F7062 
 905      6F785C50 
 905      524A335C 
 905      4C615465 
 906 01b4 73746572 		.ascii	"ster.cydsn\000"
 906      2E637964 
 906      736E00
 907              	.LASF21:
 908 01bf 72657370 		.ascii	"respondHeat\000"
 908      6F6E6448 
 908      65617400 
 909              	.LASF29:
 910 01cb 69727269 		.ascii	"irriStatus\000"
 910      53746174 
 910      757300
 911              	.LASF2:
 912 01d6 73686F72 		.ascii	"short int\000"
 912      7420696E 
 912      7400
 913              	.LASF19:
 914 01e0 696E6465 		.ascii	"index\000"
 914      7800
 915              	.LASF31:
 916 01e6 2E5C5541 		.ascii	".\\UART_Class.c\000"
 916      52545F43 
 916      6C617373 
 916      2E6300
 917              	.LASF14:
 918 01f5 63686172 		.ascii	"char\000"
 918      00
 919              	.LASF17:
 920 01fa 72657370 		.ascii	"respondSoilHum\000"
 920      6F6E6453 
 920      6F696C48 
 920      756D00
 921              	.LASF0:
 922 0209 7369676E 		.ascii	"signed char\000"
 922      65642063 
 922      68617200 
 923              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
